[
  
  {
    "title"    : "Getting started with GitHub Actions",
    "category" : "",
    "tags"     : " github, actions, basicplotteR",
    "url"      : "/2020/10/30/github-actions.html",
    "date"     : "October 30, 2020",
    "excerpt"  : "Today is the day I‚Äôve started using GitHub Actions. I found the following two resources really helpful:\n\n\n  Workflows specifically designed for R code\n  A great blog post about R workflows in action\n\n\nGitHub Actions allow you to create workflows t...",
  "content"  : "Today is the day I‚Äôve started using GitHub Actions. I found the following two resources really helpful:\n\n\n  Workflows specifically designed for R code\n  A great blog post about R workflows in action\n\n\nGitHub Actions allow you to create workflows that will execute tasks on a certain action, like pushing changes onto GitHub.\n\nEach time you complete an action (push changes to your repository), the workflow will be executed. For example, today I‚Äôve added a workflow (Quickstart Continuous Integration workflow) to my basicPlotteR package, which does the following:\n\n\n  Boots up a mac OS computer\n  Checks R is installed\n  Installs two packages:\n    \n      remotes for installing packages from GitHub\n      rcmdcheck - for checking R code\n    \n  \n  Installs my basicPlotteR package\n  Runs rcmdcheck() from the rcmdcheck package, which:\n    \n      Checks all the function documentation\n      Runs all the examples for the functions to check they work\n      Checks all functions dependencies\n      Checks the R package structure\n      And many more!!\n    \n  \n\n\nWith this workflow in place, every time I edit the code for my basicPlotteR package, the above checks will be run and I‚Äôll know straight away if I have caused any problems!\n\nGitHub Actions require a YAML formatted file to define the workflow. The Quickstart Continuous Integration workflow (available here) looks like this:\non:\n  push:\n    branches:\n      - main\n      - master\n  pull_request:\n    branches:\n      - main\n      - master\n\nname: R-CMD-check\n\njobs:\n  R-CMD-check:\n    runs-on: macOS-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: r-lib/actions/setup-r@v1\n      - name: Install dependencies\n        run: |\n          install.packages(c(&quot;remotes&quot;, &quot;rcmdcheck&quot;))\n          remotes::install_deps(dependencies = TRUE)\n        shell: Rscript {0}\n      - name: Check\n        run: rcmdcheck::rcmdcheck(args = &quot;--no-manual&quot;, error_on = &quot;error&quot;)\n        shell: Rscript {0}\n\n\nI saved the above YAML code in a file called .github/workflows/R-CMD-check.yaml in my basicPlotteR repository. Note, that I had to create the .github and workflows folders and explicitely push them onto GitHub using git add .github/workflows/R-CMD-check.yaml.\n\nWith the workflow pushed online, GitHub automatically started running the workflow!\n\n\n\nAs the above screenshot shows, the code for my basicPlotteR package needed some tidying up to get it to pass the rcmdcheck() checks! üò®\n\nBut I got there in the end!!! üéâ\n\n\n\nI added the status badge to the repository README.md using the following markdown code in the top line:\n[![R build status](https://github.com/JosephCrispell/basicPlotteR/workflows/R-CMD-check/badge.svg)](https://github.com/JosephCrispell/basicPlotteR/actions?workflow=R-CMD-check)\n\nA couple of things you‚Äôll notice in the above code:\n\n\n  The extra [ at the start - I think this is needed!\n  The path to the badge.svg file is in my repository but you‚Äôll no trace of it - I am not sure why this is but the badge is working, so I‚Äôll not question it! ü§î\n\n\nWell, I‚Äôve been amazed by the power of GitHub Actions and I‚Äôve only just started! I can‚Äôt wait to introduce more complex checks and add workflows to all my repositories!!!\n\nOh, and Happy Halloween!!! üß°\n"
} ,
  
  {
    "title"    : "Mapping my skills development with a radar chart",
    "category" : "",
    "tags"     : " basicPlotteR, radar, skills, R",
    "url"      : "/2020/10/23/radar-chart.html",
    "date"     : "October 23, 2020",
    "excerpt"  : "I‚Äôve recently added the radarChart() function into my basicPlotteR R package. Radar Charts provide a way that we can map scores in different qualitative categories.\n\nI am currently developing my Personal Development Plan and I wanted to reflect on...",
  "content"  : "I‚Äôve recently added the radarChart() function into my basicPlotteR R package. Radar Charts provide a way that we can map scores in different qualitative categories.\n\nI am currently developing my Personal Development Plan and I wanted to reflect on my current skills and what I‚Äôd like to develop.\n\nI was inspired to learn more about the radar chart by the existing radarchart() function in the fmsb R package. The key the radar chart is positioning the axes equidistantly around a circle, and thanks to Stackoverflow I didn‚Äôt have to work this out myself! üí°\n\nHere is my radarChart() function in action illustrating my current level for a range of skills and where I‚Äôd like to be over the next 6 months:\n\n# Create a chart illustrating my current skills levels\nradarChart(scores=c(4,3.5,2,3,3,3), \n           names=c(&quot;Programming&quot;, &quot;Statistics&quot;, &quot;Databases&quot;, &quot;Projects&quot;,\n                   &quot;Web&quot;, &quot;Versioning&quot;),\n           levels=c(&quot;Unaware&quot;,&quot;Aware&quot;,&quot;Working&quot;,&quot;Practitioner&quot;, &quot;Expert&quot;))\n\n# Add where I aim to get to\nradarChart(scores=c(4,3.75,3,4,3,4), \n           names=c(&quot;Programming&quot;, &quot;Statistics&quot;, &quot;Databases&quot;, &quot;Projects&quot;,\n                   &quot;Web&quot;, &quot;Versioning&quot;),\n           levels=c(&quot;Unaware&quot;,&quot;Aware&quot;,&quot;Working&quot;,&quot;Practitioner&quot;, &quot;Expert&quot;),\n           polygon.col=&quot;blue&quot;, add=TRUE)\n\n# Add a legend\nlegend(&quot;topright&quot;, \n       legend=c(&quot;Current&quot;, &quot;Aim&quot;), \n       text.col=c(rgb(1,0,0, 0.5), rgb(0,0,1, 0.5)), \n       bty=&quot;n&quot;, text.font=2, cex=1.5, xpd=TRUE)\n\n\n\n\nI consider these themes to be integral to my work as a data scientist and over the next 6 months I‚Äôll be doing the following to improve my skills:\n\n  Programming - I‚Äôm happy where I am at the moment. I can confidently program in a range of languages.\n  Statistics - A skillI‚Äôd like to improve. Currently I‚Äôm learning about geospatial statistics and Small Area Estimation techniques to extrapolate statistics to small local areas with limited sampling.\n  Databases - I‚Äôve worked with big data sources for many years, but not much with databases. I‚Äôd like to learn more about how we create, manage, and query large databases. I‚Äôm getting started by using MySQL to store and query trade statistics data.\n  Projects - As a data scientist, I‚Äôm involved in many different projects. Managing my own and other‚Äôs time is becoming increasingly important. I‚Äôve just completed a Scrum Master training course and I am excited to learn more!\n  Web - Web development is essential to disseminating and exploring data and an area I need to improve but for the moment I am happy with my current skill level. Most recently I used the html presentation framework reveal.js for a presentation about Data Ethics in practice.\n  Versioning - Understanding version control and writing high quality robust code is something I am continually working on. At the moment I am exploring unit testing and I‚Äôd like to learn more about GitHub Actions.\n\n\nFor me, this has been a really useful exercise. Taking time to reflect on my current skills and learning about the mathematics behind radial charts. The code for my radarChart() function is available here. Install my basicPlotteR package and give it a go! üèÅ\n"
} ,
  
  {
    "title"    : "Using python&#39;s googletrans library in R",
    "category" : "",
    "tags"     : " google, python, R",
    "url"      : "/2020/09/05/googletrans.html",
    "date"     : "September 5, 2020",
    "excerpt"  : "I‚Äôve recently been exploring a survey dataset that is in French. I found a python library googletrans that uses the Google Translate Ajax API to translate text.\n\nFor me, the appeal of googletrans is that it works out of the box without an API key,...",
  "content"  : "I‚Äôve recently been exploring a survey dataset that is in French. I found a python library googletrans that uses the Google Translate Ajax API to translate text.\n\nFor me, the appeal of googletrans is that it works out of the box without an API key, unlike it‚Äôs R counterpart TranslateR. Ideally though, I‚Äôd still like to translate text in R‚Ä¶\n\nThe amazing reticulate package in R provides a way of running python code from R. üéâ\n\nSo, we can create a simple python function to translate text and store it in a python script (TranslateUsingGoogleTrans.py):\ndef translate(text, translateTo):\n\n  # Load the googletrans library\n  from googletrans import Translator\n\n  # Initialise the translator\n  translator = Translator()\n\n  # Translate the text provided\n  return translator.translate(text, dest=translateTo).text\n\n\nThen we can use that code in R to translate some text:\n# Load libraries\nlibrary(reticulate)\n\n# Source the python translation code\nsource_python(&quot;TranslateUsingGoogleTrans.py&quot;)\n\n# Translate some text\ntext &amp;lt;- &quot;Je suis √©tonn√© que cela fonctionne si bien!&quot;\ntranslate(text, &#39;en&#39;)\n\n\n&amp;gt; [1] &quot;I am amazed that it works so well!&quot;\n\nI‚Äôm amazed at how well the googletrans package works and excited to adapt the code above for my survey data. I‚Äôve also hopefully demonstrated how easy it is to link python and R code with reticulate, which I often use to take advantage of some of python‚Äôs amazing libraries! üòä\n"
} ,
  
  {
    "title"    : "Getting started with Google Apps Script",
    "category" : "",
    "tags"     : " google, programming, javascript",
    "url"      : "/2020/06/20/google-scripts.html",
    "date"     : "June 20, 2020",
    "excerpt"  : "So I‚Äôve just started working with Google Apps Script.\n\n\n  Google Apps Script is a Javascript based programming language that seemlessly links to google docs.\n\n\nI‚Äôm creating a tool to update a googlesheet based on information entered into other goo...",
  "content"  : "So I‚Äôve just started working with Google Apps Script.\n\n\n  Google Apps Script is a Javascript based programming language that seemlessly links to google docs.\n\n\nI‚Äôm creating a tool to update a googlesheet based on information entered into other googlesheets - ideally it‚Äôll save some time as before the updates were done manually every day.\n\nI‚Äôm relatively new to Javascript and I am brand new to Google Apps Script. Thankfully there‚Äôs plenty of help online. For general Javascript help check out the following:\n\n  w3schools provides a huge amount of training materials\n  StackOverflow never fails to disappoint to answer every weird and wonderful question\n\n\nAnd Google has written some comprehensive documentation here. You find that Google has created objects and methods for all the Google linked tools (docs, googlesheets, calendar, mail, etc.).\n\nI‚Äôve created a DEMO workbook here. Here is a quick gif of it in action:\n\n\n\nHere are a few useful pieces of code I picked up during my work:\n\n// Open a workbook by URL\nvar workbook = SpreadsheetApp.getActive();\n\n// Open the attached workbook\nvar workbook = SpreadsheetApp.openByUrl();\n\n// Get a sheet by name\nvar sheet = workbook.getSheetByName(&quot;Sheet1&quot;);\n\n// Get values from sheet\nvar values = sheet.getRange(row, column, numRows, numColumns);\n\n// Change font colour of values in sheet\nsheet.getRange(row, column, numRows, numColumns).setFontColor(colour);\n\n\nThe main quirk to working with Google Apps Scripts is that there isn‚Äôt a terminal. Instead you can use the Logger.log(&quot;string&quot;) function to print to logs, which you can view by selecting ‚ÄúView‚Äù and then ‚Äúlogs‚Äù - this is surprisingly slow!! üòï The other solution, which I use in my demo above, is to print to a google document. Here, I print messages to a sheet within a googlesheets workbook:\n\nfunction printToLog(logSheet, string, colour=&quot;black&quot;) {\n  \n  // Get the number of rows in the log sheet\n  var nRows = logSheet.getLastRow();\n  \n  // Get the current time\n  var timeStamp = new Date();\n  \n  // Pring to log\n  logSheet.getRange(nRows+1, 1).setValue(timeStamp);\n  logSheet.getRange(nRows+1, 2).setValue(string).setFontColor(colour);\n}\n\n\nI‚Äôd recommend taking a look at my demo workbook, it is amazing how easy it is to create menus and attach functions! Also, because Google Apps Scripts is based on Javascript there are no limits to what you can do!!\n\n\n  Note that the demo is read only, so you‚Äôll need to make a cpoy before you can play around with it.\n\n\nLastly, get into the Google documentation, it is easy to search and well presented with great examples of how each function works. Enjoy! üòÄ\n"
} ,
  
  {
    "title"    : "Open Street Map tiles in R",
    "category" : "",
    "tags"     : " R, osm",
    "url"      : "/2019/07/20/openstreetmaps.html",
    "date"     : "July 20, 2019",
    "excerpt"  : "Recently I have been working with maps - trying to understand where all my samples are coming from. To do this I wanted to plot my sampling locations on top of a map. After fiddling with a number of different ways to get maps in R, I have happily ...",
  "content"  : "Recently I have been working with maps - trying to understand where all my samples are coming from. To do this I wanted to plot my sampling locations on top of a map. After fiddling with a number of different ways to get maps in R, I have happily fallen upon the OpenStreetMap package.\n\nA great package that can return a map in a variety of styles. Also, all the maps are open source and available to everyone for free!! Here is some code to get you started:\n\n# Load required libraries\nlibrary(OpenStreetMap) # I had to run sudo R CMD javareconf to get rJava to load\n\n# Note latitude and longitude of location\nupperLeft &amp;lt;- c(56.022457,-4.5969357)\nlowerRight &amp;lt;- c(56.014888,-4.5780147)\n\n# Get a satellite image of area of interest\nmap &amp;lt;- openmap(upperLeft=upperLeft,\n               lowerRight=lowerRight,\n               type=&quot;bing&quot;)\n\n# Plot the map\nplot(map)         \n\nYou‚Äôll get the following image - this is where Joanna and I got engaged! üíç On the shores of Loch Lomond, just outside Glasgow.\n\n\n\nUsing the type parameter of the openmap() function, you can change the style of the map being returned. The ‚Äúbing‚Äù option returns a satellite image of the map - my favourite!\n\nSometimes, if a particular area isn‚Äôt available in a certain style, you‚Äôll get an error something like this:\n\nError in osmtile(x%%nX, y, zoom, type) : could not obtain tile: ...\n\nYou can try different options for the type parameter to fix this issue. I quite like the &quot;opencyclemap&quot; option. Here is a great tutorial that you can a bit more help from. Enjoy!\n\nOne thing you‚Äôll have to get use to is hopping between different map projections (like latitude and longitudes, national grids, or spherical mercator projections). The openproj() is a handy function for converting between projections.\n\n"
} ,
  
  {
    "title"    : "Creating a progress bar in R",
    "category" : "",
    "tags"     : " R, progress, basicPlotteR",
    "url"      : "/2019/06/04/progress-bar.html",
    "date"     : "June 4, 2019",
    "excerpt"  : "We‚Äôve all been stuck waiting for a for loop to finish, or a particularly complex function. Over the years I have come across a few revelations when it comes to tracking the progress of my R code. Here they are in the order I found them!\n\n\n  The pr...",
  "content"  : "We‚Äôve all been stuck waiting for a for loop to finish, or a particularly complex function. Over the years I have come across a few revelations when it comes to tracking the progress of my R code. Here they are in the order I found them!\n\n\n  The print() function\n\n\nfor(i in 1:500){\n  \n\t# Sleep for 0.1 seconds\n\tSys.sleep(0.01)\n  \n\t# Print progress\n\tprint(paste(&quot;Finished&quot;, i, &quot;of&quot;, n))\n}  \n\n\n\n\n  The cat() function\n\n\nfor(i in 1:500){\n \n\t# Sleep for 0.1 seconds\n\tSys.sleep(0.01)\n\n\t# Print progress\n\tcat(&quot;Finished&quot;, i, &quot;of&quot;, n, &quot;\\n&quot;)\n}\n\n\n\n\n  The modulus operator (%%)\n\n\nfor(i in 1:500){\n  \n\t# Sleep for 0.1 seconds\n\tSys.sleep(0.01)\n\n\t# Print progress\n\tif(i %% 100 == 0){\n\t\tcat(&quot;Finished&quot;, i, &quot;of&quot;, n, &quot;\\n&quot;)\n\t}\n}\n\n\n\n\n  Overwriting a printed line using \\r\n\n\nfor(i in 1:500){\n  \n\t# Sleep for 0.1 seconds\n\tSys.sleep(0.01)\n\n\t# Print progress\n\tcat(&quot;\\rFinished&quot;, i, &quot;of&quot;, n)\n}\n\n\n\n\n  My new progress() function üòä\n\n\nlibrary(basicPlotteR)\n\nfor(i in 1:500){\n  \n\t# Sleep for 0.1 seconds\n\tSys.sleep(0.01)\n\n\t# Print progress\n\tprogress(i, n)\n}\n\n\n\n\n  R already has one!!!! üò±\n\n\n# Initialise a progress bar\npb &amp;lt;- txtProgressBar(min = 1, max = n, style = 3)\n\nfor(i in 1:500){\n  \n\t# Sleep for 0.1 seconds\n\tSys.sleep(0.01)\n\n\t# Print progress\n\tsetTxtProgressBar(pb, i)\n}\nclose(pb)\n\n\n\nEach of the methods of monitoring your progress are useful in different situations. Whilst the last two options look great, they are only useful inside for loops. The \\r blew my mind and should work in most languages! The modulus (%%) is probably the one I use the most, allows me to check my progress without printing hundreds or thousands of lines to the screen.\n\nAnyone who would like to use and see the code for my progress() function, you‚Äôll find it here on github. It is part of my basicPlotteR package.\n"
} ,
  
  {
    "title"    : "spreadPoints()",
    "category" : "",
    "tags"     : " R, package, plot, base, github",
    "url"      : "/2019/02/07/speadPoints.html",
    "date"     : "February 7, 2019",
    "excerpt"  : "I‚Äôve created a new R function called spreadPoints, in my basicPlotteR package.\n\nThe spreadPoints() function is designed to add points onto an existing boxplot. The points are spread out to avoid overlap. It works a lot like the stripchart, but it ...",
  "content"  : "I‚Äôve created a new R function called spreadPoints, in my basicPlotteR package.\n\nThe spreadPoints() function is designed to add points onto an existing boxplot. The points are spread out to avoid overlap. It works a lot like the stripchart, but it doesn‚Äôt spread points randomly. Here it is at work in R:\n\nThere is still work to be done on this function but give it a go and let me know what you think. You just need to download my basicPlotteR package:\n\n# Install the devtools package to install packages from GitHub\ninstall.packages(&quot;devtools&quot;)\n\n# Install my basicPLotteR package directly from GitHub\ndevtools::install_github(&quot;JosephCrispell/basicPlotteR&quot;)\n\n# Load it!\nlibrary(basicPlotteR)\n\n# Generate some example points - drawn from exponential distribution\nvalues &amp;lt;- rnorm(n=50)\n \n# Plot a boxplot\nboxplot(values, xlab=&quot;&quot;,  ylab=&quot;&quot;, frame=FALSE, las=1, pch=19)\n       \n# Plot the points spread along the X axis\nspreadPoints(values, position=1, col=&quot;blue&quot;)\n\n\n\n\nThe spreadPoints() function works with the following steps:\n\n  Split the Y axis into equally sized bins\n  Assign each Y point into a bin\n  Examine each Y axis bin:\n a. Count the points in current bin\n b. Split the X axis space available, to give the same amount of space to each point\n c. Working from the middle, work out left and right assigning each point a new Y coordinate\n  Plot the points with modified Y values\n\n\nWell hopefully that‚Äôs a helpful addition to the basicPlotteR package. Showing the underlying points on a boxplot is very important, particularly when there are only a few points available and I wanted a method that was non-random.\n\nStill plenty of work to do on this, so give it a go and let me knwo what you think! üòä\n"
} ,
  
  {
    "title"    : "Ben Vorlich hike",
    "category" : "",
    "tags"     : " hike",
    "url"      : "/2019/02/07/benVorlich.html",
    "date"     : "February 7, 2019",
    "excerpt"  : "A couple of weeks ago my good friend Steven McGee Callender planned a hiking trip in the Arrochar Alps. He managed to get me, Amy Thompson and Justin Purefoy to join him. We selected Ben Vorlich as an achievable goal for an inexperienced crew. We ...",
  "content"  : "A couple of weeks ago my good friend Steven McGee Callender planned a hiking trip in the Arrochar Alps. He managed to get me, Amy Thompson and Justin Purefoy to join him. We selected Ben Vorlich as an achievable goal for an inexperienced crew. We parked up on the North West edge of Loch Lomond and set off on the route described here.\n\nBrowser not compatible.\n\nDespite mixed opinions about whether we‚Äôd reach the top by the people we met along the way, we all made it. We enjoyed some spectacular views and deep snow.\n\n\n\n    \n        \n        Just about to head off!\n    \n\n    \n        \n        Spotted a frozen burst pipe\n    \n\n    \n        \n        On the steep section!\n    \n\n    \n        \n        Past the snow line!\n    \n\n    \n        \n        Deep snow!\n    \n\n    \n        \n        Testing Steven&#39;s photography\n    \n\n    \n        \n        Almost there!\n    \n\n    \n        \n        Made it!\n    \n\n    &amp;#10094;\n    &amp;#10095;\n\n\n\nLoads of amazing hikes around Loch Lomond to enjoy, check them out here ‚õ∞Ô∏è\n"
} ,
  
  {
    "title"    : "Creating an R package",
    "category" : "",
    "tags"     : " R, package, basicPlotteR",
    "url"      : "/2018/09/11/creating-R-package.html",
    "date"     : "September 11, 2018",
    "excerpt"  : "Today I‚Äôm going to write about creating an R package üì¶. It‚Äôs very easy, and something I should have learnt a long time ago. Before I start, here are a couple of very good tutorials for creating an R package:\n\n  Writing an R package from scratch\n  ...",
  "content"  : "Today I‚Äôm going to write about creating an R package üì¶. It‚Äôs very easy, and something I should have learnt a long time ago. Before I start, here are a couple of very good tutorials for creating an R package:\n\n  Writing an R package from scratch\n  Hadley Wickham‚Äôs R package documentation\n\n\nWhy bother? If you‚Äôre like me and you still haven‚Äôt embraced creating your own R packages then you‚Äôll be asking this question. It is going to save you SO MUCH time and make your code cleaner and easier to use. Get on with it!\n\nWhy does it save you time? Functions in an R package are in one place and documented. Packages are easy for other people to install and use.\n\nLastly, packages are the building blocks of the R world. By creating your own, you‚Äôve joined the community of people continuing to make R the amazing language that it is. So let‚Äôs get started!\n\nTo get started, you‚Äôll need to install and load a couple of packages:\n\n# Install necessary packages\ninstall.packages(&quot;devtools&quot;)\ninstall.packages(&quot;digest&quot;)\ndevtools::install_github(&quot;klutometis/roxygen&quot;)\n\n# Load them\nlibrary(&quot;devtools&quot;)\nlibrary(&quot;roxygen2&quot;)\n\n\nThen create the package folder:\n\npackageDirectory &amp;lt;- file.path(&quot;basicPlotteR&quot;)\ncreate(packageDirectory)\nsetwd(packageDirectory)\n\n\nI‚Äôm creating an R package for the code I wrote for a few functions I‚Äôve developed to help with plotting in R. My package is going to be called basicPlotteR.\n\nSo, we‚Äôve created our package directory. If you navigate to the directory you‚Äôll find the following:\n\n  R/ - The directory where you are going to put the code for your R functions. Each function can have it‚Äôs own file (functionName.R), or you can chuck all your functions into a single file (packageName.R)\n  basicPlotteR.Rproj - Some information for R about your package\n  DESCRIPTION - Take a look, it‚Äôs got the information about your package. See the contents of this file below.\n  NAMESPACE - A file telling R which functions to provide documentation for with the R package.\n  .gitignore - A file to be used if you‚Äôre putting your package on github, as the name suggests it‚Äôs what you don‚Äôt want to put on github.\n  .Rbuildignore - A file noting what is to be ignored when you‚Äôre building the R package.\n\n\nThe DESCRIPTION file. It has the following lines, which I have edited for my package:\nPackage: basicPlotteR\nTitle: A collection of tools to help with base R plotting\nVersion: 0.0.0.9000\nAuthors@R: person(&quot;Joseph&quot;, &quot;Crispell&quot;, email = &quot;JosephCrispell@gmail.com&quot;, role = &quot;cre&quot;)\nDescription: An R package containing all the tools I have developed to make plotting with base R a little easier\nDepends: R (&amp;gt;= 3.4.4)\nLicense: GPL-3\nEncoding: UTF-8\nLazyData: true\n\n\nRight, back to working on the package. The first thing we want to do is add some functions. Here is a general format for a function:\n\n#&#39; Short title for function\n#&#39;\n#&#39; Longer description of the function\n#&#39; @param first An object of class &quot;?&quot;. Describe each input parameter\n#&#39; @param second An object of class &quot;?&quot;. Describe each input parameter\n#&#39; @keywords Add some good keywords for your function here\n#&#39; @return Returns an object of class &quot;?&quot;. Describe what the function returns\n#&#39; @export\n#&#39; @examples\n#&#39; # Add some code here illustrating how to use the function\nfunctionName &amp;lt;- function(first, second){\n\t# Some code here\n\treturn(something)\n}\n\n\nThe code for the function is the same as for any function, but there is lot‚Äôs of information about the function above it. The weird #&#39; is a special comment that roxygen recognises. Roxygen is the package that we‚Äôre using for our build.\n\nFunctions can be saved in a R script and put in the R/ directory. I‚Äôve created a single R script for each of the tools in my basicPlotteR package.\n\nFlip! It takes a wee while to add the roxygen descriptions above each function - documentation is really important and useful though so it‚Äôs worth it!\n\nOnce you‚Äôre finished adding your functions, save the file and run the following code to update the package:\n\nsetwd(packageDirectory)\ndocument()\n\n\nAnd you‚Äôre done!! üéâ It is amazingly straight forward and I should be doing it with all my R code.\n\nHere are a few extra notes of things I‚Äôve learnt when building my packages:\n\n  When using functions from other packages in your own functions, use the following format: packageName::functionName(). Also, add @import packageName tag into the roxygen information.\n  For an internal function, a function that is used within your package but you don‚Äôt want others to see it or use it. Remove the @export tag and add @keywords internal.\n  To format code into roxygen function documentation lines, use the \\code{} container\n  If you want to attach data to your package, do the following:\n    \n      Save each object of interest alone in a file: objectName.RData\n      Create a directory: /data/ and put all the RData files in it\n      Add roxygen information into the functions file as if it were a function using the following:\n        #&#39; Description of the object\n#&#39;\n#&#39; @name objectName\n#&#39; @docType data\n#&#39; @author Joseph Crispell \\email{crispelljoseph@@gmail.com}\n#&#39; @keywords data\nNULL\n        \n      \n      Any data attached to a package can be loaded using data(&quot;objectName&quot;)\n    \n  \n\n\nI am now hosting my basicPlotteR R package on github (I created a repository with all my package files in it). You can install it and give it a go with the following code:\n\n# Load the devtools library\nlibrary(&quot;devtools&quot;)\n\n# Install the basicPlotteR package\ninstall_github(&quot;JosephCrispell/basicPlotteR&quot;)\n\n\nSo that‚Äôs how to create an R package. Start converting your R scripts now! üòä\n"
} ,
  
  {
    "title"    : "Multi-threading in R",
    "category" : "",
    "tags"     : " R, programming, parallel",
    "url"      : "/2018/08/27/multi-threading-R.html",
    "date"     : "August 27, 2018",
    "excerpt"  : "Whilst I wait for a set of around sequences to be processed, I thought I would remind myself how to do multithreading in R.\n\nMultithreading basically means running multiple tasks at the same time. It is also called parallel programming. Most moder...",
  "content"  : "Whilst I wait for a set of around sequences to be processed, I thought I would remind myself how to do multithreading in R.\n\nMultithreading basically means running multiple tasks at the same time. It is also called parallel programming. Most modern computers come with multiple cores: dual-core, quad-core, etc‚Ä¶ Unfortunately, these cores aren‚Äôt often used, I especially don‚Äôt! üëÄ\n\nAny independent task that you have to do alot should be multithreaded. For example, today I‚Äôve randomly generated a large set of nucleotide sequences using this function:\n\ncreateRandomNucleotideAlignment &amp;lt;- function(n, length){\n\n  # Initialise a dataframe to store the sequences\n  sequences &amp;lt;- list()\n\n  # Create each sequence\n  for(i in 1:n){\n\n    # Randomly sample nucleotides to create a sequence of nucleotides\n    nucleotides &amp;lt;- sample(c(&#39;A&#39;, &#39;C&#39;, &#39;G&#39;, &#39;T&#39;), size=length, replace=TRUE)\n\n    # Collapse the vector of characters (nucleotides) into single string\n    sequences[[i]] &amp;lt;- paste(nucleotides, collapse=&quot;&quot;)\n  }\n\n  return(sequences)\n}\n\nThe above function samples from the nucleotides c(&#39;A&#39;, &#39;C&#39;, &#39;G&#39;, &#39;T&#39;) to generate a random sequence that is then stored in a list called sequences.\n\nMy task is to count the numbers of As, Cs, Gs, and Ts in each of a set of randomly generated sequences. Each sequence is independent and so the counting of the nucleotides in each could be done simultaneously.\n\nSo let‚Äôs get started with multithreading in R!\n\n# Load the parallel library\nlibrary(parallel)\n\n# Get the number of threads in the current machine\nnThreads &amp;lt;- detectCores()\n\n# Initialise the cluster of threads\nclusterOfThreads &amp;lt;- makeCluster(nThreads)\n\n# Register the cluster of threads\nregisterDoParallel(clusterOfThreads, cores=nThreads)\n\n\nThere is a little bit of set up! Firstly, I‚Äôm using the parallel, so that needs to be loaded. Then I used detectCores() function to find out how many threads I have on my computer (12). Then I use makeCluster() and registerDoParallel() to make and register my cluster of threads.\n\nNext I wrote a simple function that, given a sequence, will count the number of times each nucleotide is present:\n\n\ncalculateNucleotideFrequencies &amp;lt;- function(sequence){\n\n  # Initialise a list to store the nucleotide counts\n  frequencies &amp;lt;- list(&#39;A&#39;=0, &#39;C&#39;=0, &#39;G&#39;=0, &#39;T&#39;=0)\n\n  # Split the sequence into its nucleotides\n  nucleotides &amp;lt;- strsplit(sequence, split=&quot;&quot;)[[1]]\n\n  # Count the number of times each nucleotide appears in the given sequence\n  for(nucleotide in nucleotides){\n    frequencies[[nucleotide]] &amp;lt;- frequencies[[nucleotide]] + 1\n  }\n\n  return(frequencies)\n}\n\n\nWith the above function, the sequence is split back into nucleotides, and then each nucleotide is examined and the appropriate count is increased. I used a list to store the counts, so that I could each nucleotide as a key.\n\nSo we‚Äôve initialise our cluster and we‚Äôve got a couple of functions createRandomNucleotideAlignment() and calculateNucleotideFrequencies() to create and examine a set of sequences. So here‚Äôs how to count those nucleotides in parallel:\n\n# Create a random set of nucleotide sequences\nsequences &amp;lt;- createRandomNucleotideAlignment(300, 100000)\n\n# Use multiple threads to count how many times each nucleotide appears in each sequence\nfrequences &amp;lt;- clusterApply(cl=clusterOfThreads,\n                           x=sequences,\n                           fun=calculateNucleotideFrequencies)\n\n# REMEMBER to close the cluster of threads\nstopCluster(clusterOfThreads)\n\n\nThe clusterApply() function will automatically assign each of the sequences in sequences to a 100 threads, 12 of which will be run straight away and the rest will be queued. A list of nucleotide frequencies is returned, with each position corresponding the sequence in the same position of sequences.\n\nI spent ages trying to think of a good example to demonstrate the ability of multithreading, and I don‚Äôt really think I found one! Here, I created very large sequences and with these large sequenes it is faster to count the nucleotides on multiple threads.\n\nRegardless of the example, hopefully what I have demonstrated here is that multithreading in R is very easy and I should be doing it more often!! All of the above R code is available here.\n"
} ,
  
  {
    "title"    : "Parsing newick formatted phylogenetic tree",
    "category" : "",
    "tags"     : " phylogenetics",
    "url"      : "/2018/07/25/newick.html",
    "date"     : "July 25, 2018",
    "excerpt"  : "Joanna and I are headed up to Northern Ireland today, Lydia (Joanna‚Äôs sister) is getting married. Today I was working on some Java code I wrote a few years ago to parse a Newick formatted phylogenetic tree. Whilst it is fresh in my mind, I thought...",
  "content"  : "Joanna and I are headed up to Northern Ireland today, Lydia (Joanna‚Äôs sister) is getting married. Today I was working on some Java code I wrote a few years ago to parse a Newick formatted phylogenetic tree. Whilst it is fresh in my mind, I thought I‚Äôd write a quick post - also the bus takes ages!!\n\nA phylogenetic tree, describing the ancestral relationships between a set of nucleotide sequences, can be stored can be stored in a Newick format. A detailed description of this format can be found here. The Newick format looks like this:\n\n\n\nIn the above diagram, each node of the phylogenetic tree can be represented as a simple string of characters (brackets, tip names, and branch lengths). Each string of characters details what is below the node. The string of characters (or label) for the root node (at the base of the rooted phylogenetic tree) describes the entire phylogenetic tree.\n\nSo that means, the whole phylogenetic tree can be stored using only the root label:\n\n(B:3, (C:1, (A:1, D:2):2):1);\n\n\nMy Java program (I‚Äôm still improving it, but it is available here) is designed to read this format and store the phylogenetic tree as a set of traversable (easy to move among) nodes. The trick to doing this, is in counting your brackets!!\n\nAn amazingly simple (in hindsight) format that was developed in the 1980s and remains the standard phylogenetic tree format today. Perfect timing, that‚Äôs the bus just pulling into Belfast.\n\n"
} ,
  
  {
    "title"    : "Building a computer",
    "category" : "",
    "tags"     : " building",
    "url"      : "/2018/05/09/building-computer.html",
    "date"     : "May 9, 2018",
    "excerpt"  : "I finally decided to upgrade my work computer and build a new one! After spending loads of time reading and comparing (mostly using pcpartpicker until I landed on the following parts, which I bought from komplett:\n\n\n  \n    \n      Source\n      Comp...",
  "content"  : "I finally decided to upgrade my work computer and build a new one! After spending loads of time reading and comparing (mostly using pcpartpicker until I landed on the following parts, which I bought from komplett:\n\n\n  \n    \n      Source\n      Component\n      Price\n    \n  \n  \n    \n      \n      16GB RAM card\n      ‚Ç¨169\n    \n    \n      \n      Computer case - mid-tower\n      ‚Ç¨44.90\n    \n    \n      \n      Power supply - 550watt\n      ‚Ç¨58\n    \n    \n      \n      AMD motherboard - Asus prime X370-PRO\n      ‚Ç¨139\n    \n    \n      \n      AMD processor - Ryzen 5 1600X\n      ‚Ç¨215\n    \n    \n      \n      Processor cooler\n      ‚Ç¨47.90\n    \n    \n      \n      3TB harddrive\n      ‚Ç¨103.94\n    \n    \n      \n      2GB Lenovo graphics card\n      -\n    \n  \n  \n    \n      ¬†\n      Total\n      ‚Ç¨777.74\n    \n  \n\n\nMy aim was to build a completely upgradable improvement to my current machine - a windows computer with 32GB of RAM, a i7-3770 quad-core processor and a 1TB harddrive that will continue to be used.\n\nBeing my first build, I made a blunder. I covered the processor and motherboard with thermal paste!! Note to self, with this cooler it is easier to attach it to its braces and then the braces to the motherboard! Aside from that, just a few plugs not in the right place.\n\nAfter working out how to attach the cooler and changing a couple of plugs, I am happy to say the new machine is running perfectly. It is extremely fast and I am looking forward to taking full advantage of its six cores!!! Here are some photos of the final build:\n\n\n  A quick note, almost two years later. I broke the motherboard (in transit I think), and got a replacement through warranty (thank you komplett!). This computer has worked amazingly and helped me out with some really interesting work at UCD. The photos below are of the re-build with the replacement motherboard. The case is a little dusty! üòÖ\n\n\n\n\n    \n        \n        The empty case\n    \n\n    \n        \n        Motherboard, straight out the box!\n    \n\n    \n        \n        Monster cooler! üòê\n    \n\n    \n        \n        Got the cooler on! üòÖ\n    \n\n    \n        \n        Good to go! üëç\n    \n\n    &amp;#10094;\n    &amp;#10095;\n\n\n"
} ,
  
  {
    "title"    : "Multi-threading in Java",
    "category" : "",
    "tags"     : " Java, programming, parallel",
    "url"      : "/2018/05/04/multi-threading-Java.html",
    "date"     : "May 4, 2018",
    "excerpt"  : "Today I‚Äôm heading to Milan, Italy, to meet up with Joanna, who‚Äôs been over there for the last couple of days for a meeting. To pass the time in the airport, I wrote this post about multithreading in Java.\n\nMultithreading, as the name suggests, inv...",
  "content"  : "Today I‚Äôm heading to Milan, Italy, to meet up with Joanna, who‚Äôs been over there for the last couple of days for a meeting. To pass the time in the airport, I wrote this post about multithreading in Java.\n\nMultithreading, as the name suggests, involves running multiple threads. A thread can be thought of as something that can run a single task. Multithreading is using multiple threads to complete multiple tasks in parrallel.\n\nUp until last week I hadn‚Äôt used any multithreading, but I got stuck trying to speed up some code and I thought it was time to learn. Also I built myself a new computer with 6 cores!\n\nMultithreading in Java is amazingly well supported (although the code below looks pretty daunting) and it uses the Thread class. The Thread class, like any other Java class, can be modified (extended) to suit a particular task. Here is a general class structure for a task to be completed in parallel:\n\n// Create the class and give it a name\npublic class MyThread extends Thread{\n\n  // Initialise variables you want to be able to access throughout class here\n  public [TYPE] input;\n\n  // Define how the current class can be created\n  public MyThread(String name, [TYPE] input){\n\n    // Assign a name to the current thread - using the position\n    super(name);\n\n    // Store other inputs here\n    this.input = input;\n  }\n\n  // Define a run method - this will execute when thread started\n  public void run(){\n\n    // Complete your task here - using the inputs provided\n    ...\n  }\n\n  // Create a method to retrieve whatever your task creates\n  public [TYPE] getInput(){\n    return this.input;\n  }\n}\n\n\nOnce you‚Äôve created your Thread class, then you need conduct your multithreading. You‚Äôll need a different class, which might look something like this:\n\n\n// Create the class and give it a name\npublic class MultiThreading{\n\n  // Define your main method - the place where you&#39;ll do the multithreading\n  public static void main(String[] args){\n\n    // Define the number of threads to be created (if more than number of\n    // threads available, Java will automatically queue)\n    int numberOfThreads = 4;\n\n    // Initialise an array to store each thread object\n    MyThread[] threads = new MyThread[numberOfThreads];\n\n    // Define inputs for the thread to work on here;\n    [TYPE] input = new [TYPE] ...;\n\n    // Create each thread\n    for(int i = 0; i &amp;amp;lt; numberOfThreads; i++){\n\n      // Create and start the current thread\n      threads[i] = new MyThread(&quot;thread-&quot; + i, input);\n      threads[i].start();\n    }\n\n    // Check the threads are finished\n    waitUntilAllFinished(threads)\n\n    // Do something with the output from each thread\n    for(MyThread thread : threads){\n      ...\n    }\n  }\n\n  // Define a method to check whether threads are finished\n  public static boolean finished(MyThread[] threads){\n\n    // Initialise a variable to record whether all finished\n    boolean finished = true;\n\n    // Examine each of the threads to see if any aren&#39;t finished\n    for(ExaminePosition thread : threads){\n\n      // Check if current thread finished\n      if(thread.isAlive() == true){\n\n        finished = false;\n        break;\n      }\n    }\n\n    return finished;\n  }\n\n  // Define a method to wait until threads finished\n  public static void waitUntilAllFinished(MyThread[] threads){\n\n    // Initialise a variable to record whether all threads finished\n    boolean allFinished = false;\n\n    // Keep checking the threads until they&#39;re all finished\n    while(allFinished == false){\n\n      // Check whether all threads finished\n      allFinished = finished(threads);\n    }\n  }\n}\n\n\nThe above class looks pretty long, but I‚Äôve added in some extra functions to check and wait until threads are finished. The code I‚Äôve given is a skeleton for getting started with multithreading in Java. Thanks for reading, and good luck if you‚Äôre going to be doing some multithreading of your own. I‚Äôm off to Milan!\n"
} ,
  
  {
    "title"    : "addTextLabels()",
    "category" : "",
    "tags"     : " R, package, plot, base, github",
    "url"      : "/2018/04/03/addTextLabels.html",
    "date"     : "April 3, 2018",
    "excerpt"  : "We‚Äôre frequently wanting to label points in our scatter plots but they almost always overlap! üò† Enter my addTextLabels() function.\n\naddTextLabels() is part of my basicPlotteR R package and allows you to add non-overlapping labels to points on a pl...",
  "content"  : "We‚Äôre frequently wanting to label points in our scatter plots but they almost always overlap! üò† Enter my addTextLabels() function.\n\naddTextLabels() is part of my basicPlotteR R package and allows you to add non-overlapping labels to points on a plot.\n\nThe gif below shows addTextLabels() in action and compares it to the base R  function\n\n\n\nTo create these plots, generate some random points with:\n\n\n    # Create some random points\n    n &amp;lt;- 45\n    testLabels &amp;lt;- c(&quot;short&quot;, &quot;mediummm&quot;, &quot;looooonnnnnnngggggg&quot;, &quot;0090292002&quot;, &quot;9&quot;, &quot;A Different label&quot;)\n    coords &amp;lt;- data.frame(X=runif(n), Y=runif(n, min=0, max=100), Name=sample(testLabels, size=n, replace=TRUE), stringsAsFactors = FALSE)\n\n\nThen you can remove the margins and set the background colour - only just figured out how to do this!! üéâ\n\n    # Set the margins\n    par(mar=c(0.5,0.5,0.5,0.5))\n\n    # Set the background colour\n    par(bg = rgb(0,0,1, 0.25))\n\nLastly, make the three plots:\n\n  Using the base R text() function\n  Using addTextLabels() without any formatting\n  A spruced up use of addTextLabels()\n\n\n    # With potentially overlapping labels\n    plot(x=coords$X, y=coords$Y, pch=19, bty=&quot;n&quot;, xaxt=&quot;n&quot;, yaxt=&quot;n&quot;, xlab=&quot;&quot;, ylab=&quot;&quot;, cex=2, col=rgb(1,0,0, 0.5))\n    text(coords$X, coords$Y, labels=coords$Name, xpd=TRUE, cex=2)\n\n    # Plot them with non-overlapping labels\n    plot(x=coords$X, y=coords$Y, pch=19, bty=&quot;n&quot;, xaxt=&quot;n&quot;, yaxt=&quot;n&quot;, xlab=&quot;&quot;, ylab=&quot;&quot;, cex=2, col=rgb(1,0,0, 0.5))\n    addTextLabels(coords$X, coords$Y, coords$Name, cex.label=2, col.label=&quot;black&quot;, lty=2, col.line=rgb(0,0,0, 0.5))\n\n    # Plot them with non-overlapping labels\n    plot(x=coords$X, y=coords$Y, pch=19, bty=&quot;n&quot;, xaxt=&quot;n&quot;, yaxt=&quot;n&quot;, xlab=&quot;&quot;, ylab=&quot;&quot;, cex=2, col=rgb(1,0,0, 0.5))\n    addTextLabels(coords$X, coords$Y, coords$Name, cex.label=2, col.background=rgb(0,0,0, 0.5), col.label=&quot;white&quot;, lty=2, col.line=rgb(0,0,0, 0.5))\n\n\nA method to avoid overlapping text labels already exists within the ggplot package (ggrepel), but I was keen to write my own that will work with base R plots.\n\nIt took me a wee while to get my method to work but the final version works with the following steps:\n\n\n  Create a plot that you want to label\n  Create a set of labels and coordinates to match points on plot\n  Create a set of alternative coordinates on a grid, within the limits of current plot (use par(&quot;usr&quot;) to get axis limits)\n  Remove alternative coordinates within the space designated for each point‚Äôs label (I used the strheight() and strwidth() functions for this)\n  Add labels to plot if they don‚Äôt overlap with any other point‚Äôs label.\n  If a label will overlap, search the laternative coordinates from closest to farthest, once found:\n    \n      Add a text label at the chosen location and plot a line back to the original point\n      Remove any of the alternative label locations that would overlap with the chosen location and its label\n      Change the point‚Äôs coordinates to be those of the alternative location\n    \n  \n\n\nThere is still work to be done on this function but give it a go and let me know what you think. You just need to download my basicPlotteR package:\n\n# Install the devtools package to install packages from GitHub\ninstall.packages(&quot;devtools&quot;)\n\n# Install my basicPLotteR package directly from GitHub\ndevtools::install_github(&quot;JosephCrispell/basicPlotteR&quot;)\n\n# Load it!\nlibrary(basicPlotteR)\n\n# Get cracking!!\n\n"
} ,
  
  {
    "title"    : "Building a bicycle stand",
    "category" : "",
    "tags"     : " bicycle",
    "url"      : "/2018/01/31/bicycleStand.html",
    "date"     : "January 31, 2018",
    "excerpt"  : "I‚Äôve decided that some of my posts should document useful things I‚Äôve built, hopefully making building them in the future a little easier. I am starting with our bicycle stand. üö¥\n\nOur bikes have long been resting against the wall in our house in D...",
  "content"  : "I‚Äôve decided that some of my posts should document useful things I‚Äôve built, hopefully making building them in the future a little easier. I am starting with our bicycle stand. üö¥\n\nOur bikes have long been resting against the wall in our house in Dublin. A couple of weeks ago, I finally got round to building a stand-a-lone bicycle stand. It is made from wood found in local skips. Here are my plans:\n\n\n\nAnd here it is in action! It flexes a little with the load but seems pretty sturdy.\n\n\n"
} ,
  
  {
    "title"    : "Things to remember",
    "category" : "",
    "tags"     : " remember, programming",
    "url"      : "/2017/10/11/things-to-remember.html",
    "date"     : "October 11, 2017",
    "excerpt"  : "Today I am on the train to Belfast to meet with collaborators at the AFBINI. To pass the time I am taking advantage of the free wifi to add a post to store some useful pieces of code I always forget.üí°\n\nI am always forgetting simple coding solution...",
  "content"  : "Today I am on the train to Belfast to meet with collaborators at the AFBINI. To pass the time I am taking advantage of the free wifi to add a post to store some useful pieces of code I always forget.üí°\n\nI am always forgetting simple coding solutions that I need often; I constantly find myself googling something I had looked up just a few days before and the top links are always purple (visited).\n\nBelow are some of the commands that I most frequently forget, although I find them extremely useful: ü§î\n\n\n  Unpacking a file whose name ends with ‚Äú.tar.gz‚Äù in Ubuntu\n\n\n# Options used:\n# x    Extract files in tar\n# v    Verbose - print out progress information\n# z    Unzip file (Use if file ends with &quot;.gz&quot;)\n# f    Filename will follow\ntar -xvzf fileName.tar.gz\n\n\n\n  Reading a table into R whilst avoiding some annoying R habits\n\n\n# Options used:\n# header=TRUE    There will be column titles in first line of file\n# stringsAsFactors=FALSE    Don&#39;t convert strings (words/names) into factors (categories)\n# check.names=FALSE    Don&#39;t let R run checks on column names\n# Note that check.names = TRUE removes spaces and special chracters - USE WISELY!\ntableName &amp;lt;- read.table(fileName, header=TRUE, stringsAsFactors=FALSE, check.names=FALSE)\n\n\n\n  Read a file into R line by line (only feasible for small file!)\n\n\n# Open a connection to a file to read (open=&quot;r&quot;)\nconnection &amp;lt;- file(fileName, open=&quot;r&quot;)\n\n# Get all lines from file and store in vector\nfileLines &amp;lt;- readLines(connection)\n\n# Close file connection\nclose(connection)\n\n# Loop through each of the lines in file\nfor(line in fileLines){\n    ...\n}\n\n\n\n  Set the plotting margin sizes in R\n\n\n# Setting margin sizes: c(bottom, left, top, right)\npar(mar=c(5.1, 4.1, 4.1, 2.1))\n\n\n\n  Initialise array of zeros in perl\n\n\n# Initialise an array of 10 zeros\nmy @arrayName = (0) x 10;\n\n\n\n  Remove special characters from string in perl\n\n\nmy $stringName = &quot;Some string&quot;;\n$stringName =~ s/\\R//g;\n\n\n\n  \n    Change path to Java jre for Eclipse after Java update - not a piece of code but useful for Java coding!\n\n    \n      Edit the C:/Program Files/Java/jre1.X.X_X/bin line in eclipse.ini file.\n      The eclipse.ini file can be found in the C:\\Users\\Joseph Crispell\\eclipse\\java-mars\\eclipse\\ folder on my Windows machine\n      NOTE: if you remove this line and the line (-vm) before, you‚Äôll never have to do this again!\n    \n  \n  \n    Change the amount of memory assigned to heap space for the Java virtual maachine used in Eclipse. The heap space is the memory used in the creation and removal of variables - I think!\n\n    \n      Edit the two lines beginning -Xm in eclipse.ini file\n      -Xms refers to the initial amount of memory to assign to the heap space\n      -Xmx refers to the maximum amount of memory to assign to the heap space\n    \n  \n  \n    Function to change the alpha value of colour in R\n  \n\n\nsetAlpha &amp;lt;- function(colour, alpha){\n\n    # Convert the input colour into rgb values\n    rgbValues &amp;lt;- col2rgb(colour)\n\n    # Place rgb values within rgb function and insert alpha value\n    # Note that col2rgb returns rgbvlues from 0 to 255\n    rgbColour &amp;lt;- rgb(rgbValues[&quot;red&quot;, 1], rgbValues[&quot;green&quot;, 1], rgbValues[&quot;blue&quot;, 1], alpha=alpha*255, maxColorValue=255)\n\n    return(rgbColour)\n}\n\n\n\n  Get current date in R\n\n\ntoday &amp;lt;- format(Sys.Date(), &quot;%d-%m-%y&quot;)\n\n\n\n  Laying out plots in R\n\n\n# Set the layout of the plots within the plotting window\nlayout(matrix(c(1,1,3,2), nrow=2, ncol=2, byrow=TRUE))\n\n# Set the margin sizes\npar(mar=c(0.5,0.5,0.5,0.5))\n\n# Create the plots\nfor(i in 1:3){\n    plot(x=NULL, y=NULL, xlim=c(0,1), ylim=c(0,1), xaxt=&quot;n&quot;, yaxt=&quot;n&quot;, xlab=&quot;&quot;, ylab=&quot;&quot;)\n         text(x=0.5, y=0.5, labels=i, cex=5)\n}\n\n\n\n\n  Syncing a github repository\n\n\ngit add *\ngit add . -A # Removes deleted files\ngit commit -m &quot;Write commit message here&quot;\ngit push\n\n\n\n  Get axis limits of current plot in R\n\n\n# Returns vector: c(xMin, xMax, yMin, yMax)\naxisLimits &amp;lt;- par(&quot;usr&quot;) \n\n\n\n  Overwriting your progress statements in R using \\r\n\n\n# Initialise for loop to demonstrate progress printing\n for(i in 1:100){\n\n    Sys.sleep(0.1)\n    cat(paste(&quot;\\rFinished step &quot;, i, &quot; of &quot;, n))\n}\n\n"
} ,
  
  {
    "title"    : "Creating a local BLAST database",
    "category" : "",
    "tags"     : " blast",
    "url"      : "/2017/08/03/blast.html",
    "date"     : "August 3, 2017",
    "excerpt"  : "BLAST is a powerful tool that can be used to compare genetic sequences. BLAST works by comparing a genetic sequence of nucleotides (A, C, G, and T) to a database of sequences.\n\nIn the UNIX environment BLAST can easily be installed using the follow...",
  "content"  : "BLAST is a powerful tool that can be used to compare genetic sequences. BLAST works by comparing a genetic sequence of nucleotides (A, C, G, and T) to a database of sequences.\n\nIn the UNIX environment BLAST can easily be installed using the following code:\n\n# Install BLAST\nsudo apt-get install ncbi-blast+\n\n\nOnce installed BLAST can be executed from the UNIX terminal. You can either compare your sequences to all the nucleotide data available in the online databases, using the following code:\n\n# Compare query sequences to online databases\nblastn -query querySequences.fasta -out blastOutput.txt -db nr -remote\n\n\nOr you can create a local database on your computer containing the sequences that you are interested in comparing your query sequences against, using the following code:\n\n# Make local database\nmakeblastdb -in databaseSequences.fasta -parse_seqids -dbtype nucl\n\n\nWith your local database created, you can compare your query sequences against it using the following code:\n\n# Compare sequences to local database\nblastn -query querySequences.fasta -out blastOutput.txt -db databaseSequences -outfmt 0\n\n"
} ,
  
  {
    "title"    : "Submitting FASTQ files to Sequence Read Archive (SRA)",
    "category" : "",
    "tags"     : " sra",
    "url"      : "/2017/04/06/sra.html",
    "date"     : "April 6, 2017",
    "excerpt"  : "FASTQ files are the files containing the raw sequencing data that are produced by Next Generation Sequencing platforms such as those made by Illumina. These files contain all the information produced by a sequencing run and are used in all downstr...",
  "content"  : "FASTQ files are the files containing the raw sequencing data that are produced by Next Generation Sequencing platforms such as those made by Illumina. These files contain all the information produced by a sequencing run and are used in all downstream analyses.\n\nAs there is a drive to make research accessible, making these FASTQ files publicly available is becoming increasingly common. Here I provide a short outline of how to go about uploading FASTQ files to the Sequence Read Archive.\n\nA more detailed description of this uploading process can be found here.\n\n\n  \n    Create an NCBI account here\n  \n  Initialise a Bioproject\n    \n      Go to the Bioproject page\n      Login to your NCBI account\n      Create a New Submission and fill in the required fields, leaving the Biosample field blank\n    \n  \n  Initialise a Biosample\n    \n      Go to the Biosample page\n      Download the batch submission template as a TSV (tab separated values) file and fill in the required fields\n      Create a New Submission and fill in the required fields, including uploading the TSV file\n      Wait for the submission to be accepted\n      Click on ‚ÄúDownload attributes file with BioSample accessions‚Äù to get the assigned accession numbers\n    \n  \n  Prepare metadata file for Sequence Read Archive submission\n    \n      Download a SRA_metadata_acc.xlsx file (I had to begin a SRA submission).\n      Fill in the required fields - using Bioproject number (PRJNA‚Ä¶) and Biosample accessions\n      You used to need the FASTQ file md5sum values (BUT I DIDN‚ÄôT FOR MY RECENT SUBMISSION)\n      You can get md5sum values using the following UNIX command: md5sum [fileName]\n      Create a Sequence Read Archive submission, if you haven‚Äôt already, and fill in the required fields\n      At this point you can upload the metadata file you created in step 4\n    \n  \n  Log onto SRA server\n    \n      If your files are &amp;lt;10GB and you have less than 300 of them, upload your FASTQ files via the web browser. This is so much easier! Or:\n      On the SRA page click on the FTP upload link\n      Note the server address, username, password and folder to navigate to\n      On a UNIX machine navigate to the folder containing (only) your FASTQ files\n      Log onto the server\n    \n  \n\n\nftp -i\nopen [server address]\n\n\n\n  Upload the FASTQ files\n    \n      Note that once logged into server directories are hidden - use full path to folder\n      Once in correct folder create new directory\n      Upload all FASTQ files\n    \n  \n\n\n# Navigate to server directory\ncd [path to folder]\n\n# Make a new directory to store FASTQ files in\nmkdir [new directory name]\ncd [new directory name]\n\n# Copy all FASTQ files into new directory\nmput *\n\n\n\n  Completing the Sequence Read Archive submission\n    \n      Go back to the Sequence Read Archive submission page\n      On the data uploading tab the folder you created to upload your FASTQ files into should exist.\n      Select this folder and click continue.\n      If no errors appear, it means all the FASTQ files were successfully linked to the metadata you provided and you can submit!\n    \n  \n\n\nTook me more than a few attempts to get this to work. If you run into any issues there is a dedicated NCBI team who are happy to help. Here are their emails:\n\n  bioprojecthelp@ncbi.nlm.nih.gov\n  biosamplehelp@ncbi.nlm.nih.gov\n  srahelp@ncbi.nlm.nih.gov\n\n"
} 
  
  ,
  
  {
  
  "title"    : "Possums, cows, and bovine tuberculosis in New Zealand",
  "category" : "",
  "tags"     : " New Zealand, genomics, bovine tuberculosis, PhD, research, Mycobacterium bovis, badgers, cattle",
  "url"      : "/projects/newzealand",
  "date"     : "February 16, 2017",
  "excerpt"  : "My first published research looked at bovine tubeculosis in cattle and widlife in New Zealand. Take a look at it here.\n\nWe used whole genome sequencing to trace the transmission of Mycobacterium bovis, a bacteria that causes bovine tuberculosis, b...",
  "content"  : "My first published research looked at bovine tubeculosis in cattle and widlife in New Zealand. Take a look at it here.\n\nWe used whole genome sequencing to trace the transmission of Mycobacterium bovis, a bacteria that causes bovine tuberculosis, between cattle and wildlife.\n\nIn New Zealand, the brushtail possum (see my impression below üò≥) is a pest species - originally imported for the fur industry. There are 30 million possums in New Zealand and they can be infected by the M. bovis bacteria. Their infection can spread into cattle, especially where cattle live close to the bush (dense forested areas), where possums live.\n\n\n\nOur research showed that the M. bovis bacteria was frequently being transmitted between cattle and wildlife populations in New Zealand. Given that there were less than 50 infected cattle herds in New Zealand at the time, this suggested that the possum population were acting as the main source of infection.\n\nFor me, this research was an amazing opportunity to work some incredible researchers in New Zealand - as well as meet them in person! Marian Price-Carter led this research project and continues to amazing work in the bovine tuberculosis program in New Zealand.\n\nHave a look at the research here and let me know what you think.\n"
  
} ,
  
  {
  
  "title"    : "homoplasyFinder",
  "category" : "",
  "tags"     : " homoplasyFinder, phylogenetics, bioinformatics, java, R, package",
  "url"      : "/projects/homoplasyfinder",
  "date"     : "January 21, 2019",
  "excerpt"  : "Firstly, what is a homoplasy? It is a trait (for example, a nucleotide at a position in an alignment) that is shared between tips that their immediate common ancestor doesn‚Äôt have.\n\nSee the left hand side of the figure below, there are tips with a...",
  "content"  : "Firstly, what is a homoplasy? It is a trait (for example, a nucleotide at a position in an alignment) that is shared between tips that their immediate common ancestor doesn‚Äôt have.\n\nSee the left hand side of the figure below, there are tips with a T (thymine) nucleotide that are surrounded by tips with an A (adenine).\n\n\n\nHomoplasies are interesting because they make sequences seem more similar than they evolutionarily are - complicating phylogenetic analyses.\n\nHomoplasies can also help us to understand evolution, perhaps there is a benefit to a particular mutation or trait. By identifying homoplasies, we can hone in our search to mutations causing antibiotic resistance, for example.\n\nFrom the right handside of the figure above, we can see how you can identify homoplasies. Read more about how HomoplasyFinder uses the consistency index to identify here.\n\nSoon after I moved to Dublin, I decided to build HomoplasyFinder. An R package that we can use to identify homoplasies on a phylogeny using a nucleotide alignment.\n\nAfter a quick look (I should have spent longer! üò≥), I couldn‚Äôt find a tool so I decided to created my own.\n\nI spent a bit of time trying to figure out how to make my tool so that it could automatically identify homoplasies and came up a pretty good solution (I thought!). So, I created the HomoplasyFinder tool and then spent much longer figuring out whether it worked!\n\nTo my surprise, it did work and, happy with my creation, I proceeded to create an R package and write an article. I submitted my article and month later all my hopes were dashed!\n\nThe article was rejected‚Ä¶ üò≠\n\nAfter a wee bit (a lot) of grumping, I realised that my manuscript was rejected for a very good reason. I hadn‚Äôt read about the consistency index - a beautifully simple method for identifying homoplasies that was defined in the 1970s (read the article). Well, I had read about it but I hadn‚Äôt understood it! The consistency index is a measure of how consistent each site in a set of genetic sequences is with a given phylogeny. The consistency index can be thought of as a measure of how homoplasious a site is\n\nI took a break from HomoplasyFinder, trying to bury this embarrassing affair.\n\nThen after a month or two, I decided to re-make HomoplasyFinder using the consistency index. I also had a thorough look for tools that could identify homoplasies and I found a few.\n\nUnsurprisingly, my new and improved HomoplasyFinder turned out to be much faster than my previous version and, surprisingly, it was also faster, after some improvements, than the tools I found that did the same thing! (This still worries me a little, maybe I am cheating in some way!)\n\nSo, with renewed hope, I updated my manuscript and submitted to a different journal. Following some very helpful reviewers comments it got published!! üéâ\n\nA year on and I am still doing a bit of work on HomoplasyFinder and hopefully I will continue to.\n\nGive it a go and let me know what you think!\n"
  
} ,
  
  {
  
  "title"    : "basicPlotteR",
  "category" : "",
  "tags"     : " plot, base, R, package",
  "url"      : "/projects/basicplotter",
  "date"     : "March 23, 2019",
  "excerpt"  : "basicPlotteR is an R package designed to help you making plots in base R. The base R package is the package that comes with R, it contains all those functions that makes R what it is.\n\nThere are loads of plotting functions available in the base R ...",
  "content"  : "basicPlotteR is an R package designed to help you making plots in base R. The base R package is the package that comes with R, it contains all those functions that makes R what it is.\n\nThere are loads of plotting functions available in the base R package. I try to use these as much as possible as I think they give me the most flexibility in how I create my plots. I designed basicPlotteR package to be a collection of additional plotting functions that add a little bit extra to the base plotting functions.\n\nI‚Äôll keep adding functions to basicPlotteR, for the moment though my favourite is addTextLabels(). It mimics the base R function text() by adding text labels to an existing plot, but it re-positions text to avoiding any overlapping.\n\n\n\nThere are loads more functions to play around with. Download the package and get started with the following code:\n\n# Install the devtools R package - for downloading packages from github\ninstall.packages(&quot;devtools&quot;)\n\n# Install basicPlotteR\ndevtools::install_github(&quot;JosephCrispell/basicPlotteR&quot;)\n\n# Load the basicPlotteR package\nlibrary(basicPlotteR)\n\n...\n\n\nTo learn more, take a look at the github page here.\n"
  
} ,
  
  {
  
  "title"    : "My teaching projects",
  "category" : "",
  "tags"     : " teaching",
  "url"      : "/projects/teaching",
  "date"     : "October 3, 2019",
  "excerpt"  : "Teaching data science is one of my passions. Here is where I am going to keep a note of the teaching materials that I‚Äôve developed.\n\nSo far, here‚Äôs the online materials that I‚Äôve created:\n\n\n  Pathogen Genomics Workshop - a workshop designed around...",
  "content"  : "Teaching data science is one of my passions. Here is where I am going to keep a note of the teaching materials that I‚Äôve developed.\n\nSo far, here‚Äôs the online materials that I‚Äôve created:\n\n\n  Pathogen Genomics Workshop - a workshop designed around an R package. I‚Äôm trying to introduce the topic of building phylogenetic trees in R.\n  An introduction to creating a Reproducible Analytical Pipeline (RAP). Well worth a look and built using the Rmarkdown ioslides presentation tool.\n  A quick tutorial about using the RMySQL R package. RMySQL is a cool package that allows you to interact with a local SQL server from within R.\n\n\nHopefully I‚Äôll continue adding to these materials. Let me know what you think!\n"
  
} ,
  
  {
  
  "title"    : "phyloHelpeR",
  "category" : "",
  "tags"     : " plot, base, R, package, phylogenetics",
  "url"      : "/projects/phylohelper",
  "date"     : "November 21, 2019",
  "excerpt"  : "I‚Äôve been working with phylogenies in R for a long time. I find the ape and phytools to be the most useful.\n\nThe phyloHelpeR is an R package to make a home for some of the functions I use a lot when building and plotting phylogenies in R. At the m...",
  "content"  : "I‚Äôve been working with phylogenies in R for a long time. I find the ape and phytools to be the most useful.\n\nThe phyloHelpeR is an R package to make a home for some of the functions I use a lot when building and plotting phylogenies in R. At the moment it is home to the following functions:\n\n\n  tanglePlot() a function to plot two phylogenies based on the same sequences opposite one another so you can see how they differ.\n  runRAXML() a function to interact with the command line phylogenetic tree building tool RAxML\n  addSNPScale() a function to add a scale to a phylogeny whos branch lengths are scaled to the number of Single Nucleotide Polymorphisms.\n\n\nAs you can see, this R package is a work in progress‚Ä¶ As I don‚Äôt work on phylogenetics anymore my contributions will be slow but hopefully I‚Äôll still add a few more helpful functions. üëç\n\n"
  
} ,
  
  {
  
  "title"    : "Badgers, cattle, and bovine tuberculosis in South West England",
  "category" : "",
  "tags"     : " genomics, bovine tuberculosis, PhD, research, Mycobacterium bovis, badgers, cattle",
  "url"      : "/projects/woodchester",
  "date"     : "December 16, 2019",
  "excerpt"  : "Today, after a huge amount of work over many years, our research using genomics to look at how often Mycobacterium bovis was transmitted within and between cattle and badgers in Woodchester Park has been published!\n\n\n  Mycobacterium bovis is a bac...",
  "content"  : "Today, after a huge amount of work over many years, our research using genomics to look at how often Mycobacterium bovis was transmitted within and between cattle and badgers in Woodchester Park has been published!\n\n\n  Mycobacterium bovis is a bacteria that infects cattle causing bovine tuberculosis. It costs the UK goverment tens of millions of pounds every year to control. It can infect many different species. In fact, in the UK, badger populations are can be infected and research has shown that infection can spread between cattle and badgers.\n\n\nTake a look at the article here! You can also read a nice summary in The Guardian.\n\nWoodchester Park, shown below, is a reserve in the south west of England. In this park there is a mixture of fertile farmland pasture, woodland and small ponds - the perfect place for a badger to live! ü¶°\n\n\n\nAround three hundred badgers live in Woodchester Park in small social groups of 5-12 individuals. There are also cattle that graze on the fields in and around the park.\n\nOur research used samples of Mycobacterium bovis bacteria from infected cattle and badgers living in and around Woodchester Park. We sequenced the genomes of these bacteria and  found that the badgers and cattle were infected with very similar strains of the bacteria, sometimes even the exact same strain! This meant that infection was being transmitted between the badgers and cattle, and it must have been happening quite frequently.\n\n\n  But who was giving it to whom?\n\n\nTo estimate how often infection was transmitted from cattle to badgers, and in the other direction, we used a tool called BASTA.\n\n\n\n\n  We found that badgers were transmitting infection to cattle more frequently. We also found that transmission between animals of the same species was more common. So cattle were more likely to infect other cattle and badgers other badgers, than cattle infect badgers or vice versa.\n\n\nOur research relied upon a very large collaboration between institutions across the United Kingdom and Republic of Ireland. The main institutions involved were:\n\n  University of Glasgow\n  University of Edinburgh\n  University College Dublin\n  Agri-Food and Biosciences Institute\n  Animal &amp;amp; Plant Health Agency\n\n\n\n  Our data was only from Woodchester Park, a small area in the South West of England. Without further research, we don‚Äôt know if what we found here is true elsewhere.\n\n\nTake a look at the paper! ü¶°üêÑü¶†üß¨\n\n"
  
} ,
  
  {
  
  "title"    : "Bovine TuBerculosis Genomics IrEland",
  "category" : "",
  "tags"     : " DAFM, grant, research, genomics, bovine tuberculosis, Mycobacterium bovis",
  "url"      : "/projects/btbgenie",
  "date"     : "March 1, 2020",
  "excerpt"  : "This time last year, Stephen Gordon and I were furiously writing a grant for funding from the Department of Agriculture, Food &amp; the Marine (DAFM) for their National Research Call.\n\nWe hoped to get funding to work towards integrating whole geno...",
  "content"  : "This time last year, Stephen Gordon and I were furiously writing a grant for funding from the Department of Agriculture, Food &amp;amp; the Marine (DAFM) for their National Research Call.\n\nWe hoped to get funding to work towards integrating whole genome sequencing into bovine tuberculosis surveillance in the Republic of Ireland.\n\nI came up with the acronym BTBGENIE: Bovine TuBcuolosis GENomics IrEland. üòä\n\nIn December, Steve and I found out our grant was successful and in March this year the project has begun. There were lots of interesting projects funding across all sorts of fields (read about them here).\n\nI‚Äôve now moved on from working at UCD but hopefully I‚Äôll still be involved.\n\nWe‚Äôll sequence the whole genome of Mycobacterium bovis, a bacteria that causes bovine tuberculosis, from infected cattle and wildlife. Then, by comparing these genomes we‚Äôll use there similarity to track transmission. More similar genomes, means there may have been a recent transmission event linking the animals.\n\nBy rolling out genome sequencing for bovine tuberculosis surveillance across Ireland, we‚Äôll hopefully be able to track the sources of infection in a herd more efficiently. Answering questions like:\n\n\n  Could the infection have come from wildlife living locally?\n  Has the herd been infected with this strain before?\n  Have any other herds in Ireland been infected with the same strain?\n\n\nBTBGENIE will be a team effort, with researchers from all over Ireland:\n\n\n  DAFM Central Veterinary Research Laboratory\n  Queen‚Äôs University Belfast\n  The Agri-Food and Biosciences Institute in Northern Ireland\n  University College Dublin\n\n\nKeep a look out for our latest research! üî≠\n"
  
} ,
  
  {
  
  "title"    : "Website",
  "category" : "",
  "tags"     : " website, jekyll, github pages",
  "url"      : "/projects/website",
  "date"     : "April 11, 2020",
  "excerpt"  : "My website is a place for me to take note of my interests, both inside and outside of work. I‚Äôll keep adding to, and improving, it!\n\nMost recently I‚Äôve re-designed my website, changing from a simple html and css structure to a more complex Jekyll ...",
  "content"  : "My website is a place for me to take note of my interests, both inside and outside of work. I‚Äôll keep adding to, and improving, it!\n\nMost recently I‚Äôve re-designed my website, changing from a simple html and css structure to a more complex Jekyll themed website. Jekyll still uses html and css, but it also does some clever automated steps behind the scenes to make blogging a little easier.\n\nTo build my new Jekyll based website, I chose a couple of Jekyll themes (from here) and spent a bit of time extracting the bits of these that I liked and combining them into my own. The two templates I used were:\n\n\n  The Type on Strap theme to give me the blogging template (posts, projects, tagging and searching)\n  And the particle theme for the (interactive!!) front page, which uses the amazing particle.js library.\n\n\nJekyll works really well with github pages, so I was able to branch my existing website repository and get to work on the new one. Take a look at the code here.\n\nI owe a lot of thanks to the documentation of the Type on Strap and particle themes, helping me to understand how a Jekyll page works. Nothing better than a well commented and structured piece of open-source code!! ‚ù§Ô∏è\n\nThe next project for this website is to clean up all the code, removing anything unnecessary for my website and then I plan on releasing it as a website template. There are so many cool templates out there, and maybe mine could be one of them! üòÄ\n\nTake a look around and let me know what you think.\n\n"
  
} 
  
]
