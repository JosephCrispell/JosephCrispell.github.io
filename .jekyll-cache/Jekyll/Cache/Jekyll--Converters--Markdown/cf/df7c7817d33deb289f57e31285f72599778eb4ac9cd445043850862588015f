I"r/<p>Whilst I wait for a set of around sequences to be processed, I thought I would remind myself how to do multithreading in R.</p>

<p>Multithreading basically means running multiple tasks at the same time. It is also called parallel programming. Most modern computers come with multiple cores: dual-core, quad-core, etcâ€¦ Unfortunately, these cores arenâ€™t often used, I especially donâ€™t! ðŸ‘€</p>

<p>Any independent task that you have to do alot should be multithreaded. For example, today Iâ€™ve randomly generated a large set of nucleotide sequences using this function:</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">createRandomNucleotideAlignment</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="w"> </span><span class="n">length</span><span class="p">){</span><span class="w">

  </span><span class="c1"># Initialise a dataframe to store the sequences</span><span class="w">
  </span><span class="n">sequences</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">list</span><span class="p">()</span><span class="w">

  </span><span class="c1"># Create each sequence</span><span class="w">
  </span><span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="n">n</span><span class="p">){</span><span class="w">

    </span><span class="c1"># Randomly sample nucleotides to create a sequence of nucleotides</span><span class="w">
    </span><span class="n">nucleotides</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">sample</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s1">'A'</span><span class="p">,</span><span class="w"> </span><span class="s1">'C'</span><span class="p">,</span><span class="w"> </span><span class="s1">'G'</span><span class="p">,</span><span class="w"> </span><span class="s1">'T'</span><span class="p">),</span><span class="w"> </span><span class="n">size</span><span class="o">=</span><span class="n">length</span><span class="p">,</span><span class="w"> </span><span class="n">replace</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">)</span><span class="w">

    </span><span class="c1"># Collapse the vector of characters (nucleotides) into single string</span><span class="w">
    </span><span class="n">sequences</span><span class="p">[[</span><span class="n">i</span><span class="p">]]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">paste</span><span class="p">(</span><span class="n">nucleotides</span><span class="p">,</span><span class="w"> </span><span class="n">collapse</span><span class="o">=</span><span class="s2">""</span><span class="p">)</span><span class="w">
  </span><span class="p">}</span><span class="w">

  </span><span class="nf">return</span><span class="p">(</span><span class="n">sequences</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<p>The above function samples from the nucleotides <code class="language-plaintext highlighter-rouge">c('A', 'C', 'G', 'T')</code> to generate a random sequence that is then stored in a <code class="language-plaintext highlighter-rouge">list</code> called <code class="language-plaintext highlighter-rouge">sequences</code>.</p>

<p>My task is to count the numbers of <code class="language-plaintext highlighter-rouge">A</code>s, <code class="language-plaintext highlighter-rouge">C</code>s, <code class="language-plaintext highlighter-rouge">G</code>s, and <code class="language-plaintext highlighter-rouge">T</code>s in each of a set of randomly generated sequences. Each sequence is independent and so the counting of the nucleotides in each could be done simultaneously.</p>

<p>So letâ€™s get started with multithreading in R!</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Load the parallel library</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">parallel</span><span class="p">)</span><span class="w">

</span><span class="c1"># Get the number of threads in the current machine</span><span class="w">
</span><span class="n">nThreads</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">detectCores</span><span class="p">()</span><span class="w">

</span><span class="c1"># Initialise the cluster of threads</span><span class="w">
</span><span class="n">clusterOfThreads</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">makeCluster</span><span class="p">(</span><span class="n">nThreads</span><span class="p">)</span><span class="w">

</span><span class="c1"># Register the cluster of threads</span><span class="w">
</span><span class="n">registerDoParallel</span><span class="p">(</span><span class="n">clusterOfThreads</span><span class="p">,</span><span class="w"> </span><span class="n">cores</span><span class="o">=</span><span class="n">nThreads</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>There is a little bit of set up! Firstly, Iâ€™m using the <code class="language-plaintext highlighter-rouge">parallel</code>, so that needs to be loaded. Then I used <code class="language-plaintext highlighter-rouge">detectCores()</code> function to find out how many threads I have on my computer (12). Then I use <code class="language-plaintext highlighter-rouge">makeCluster()</code> and <code class="language-plaintext highlighter-rouge">registerDoParallel()</code> to make and register my cluster of threads.</p>

<p>Next I wrote a simple function that, given a sequence, will count the number of times each nucleotide is present:</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="n">calculateNucleotideFrequencies</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">sequence</span><span class="p">){</span><span class="w">

  </span><span class="c1"># Initialise a list to store the nucleotide counts</span><span class="w">
  </span><span class="n">frequencies</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">list</span><span class="p">(</span><span class="s1">'A'</span><span class="o">=</span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="s1">'C'</span><span class="o">=</span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="s1">'G'</span><span class="o">=</span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="s1">'T'</span><span class="o">=</span><span class="m">0</span><span class="p">)</span><span class="w">

  </span><span class="c1"># Split the sequence into its nucleotides</span><span class="w">
  </span><span class="n">nucleotides</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">strsplit</span><span class="p">(</span><span class="n">sequence</span><span class="p">,</span><span class="w"> </span><span class="n">split</span><span class="o">=</span><span class="s2">""</span><span class="p">)[[</span><span class="m">1</span><span class="p">]]</span><span class="w">

  </span><span class="c1"># Count the number of times each nucleotide appears in the given sequence</span><span class="w">
  </span><span class="k">for</span><span class="p">(</span><span class="n">nucleotide</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">nucleotides</span><span class="p">){</span><span class="w">
    </span><span class="n">frequencies</span><span class="p">[[</span><span class="n">nucleotide</span><span class="p">]]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">frequencies</span><span class="p">[[</span><span class="n">nucleotide</span><span class="p">]]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="m">1</span><span class="w">
  </span><span class="p">}</span><span class="w">

  </span><span class="nf">return</span><span class="p">(</span><span class="n">frequencies</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>With the above function, the sequence is split back into nucleotides, and then each nucleotide is examined and the appropriate count is increased. I used a <code class="language-plaintext highlighter-rouge">list</code> to store the counts, so that I could each nucleotide as a key.</p>

<p>So weâ€™ve initialise our cluster and weâ€™ve got a couple of functions <code class="language-plaintext highlighter-rouge">createRandomNucleotideAlignment()</code> and <code class="language-plaintext highlighter-rouge">calculateNucleotideFrequencies()</code> to create and examine a set of sequences. So hereâ€™s how to count those nucleotides in parallel:</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Create a random set of nucleotide sequences</span><span class="w">
</span><span class="n">sequences</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">createRandomNucleotideAlignment</span><span class="p">(</span><span class="m">300</span><span class="p">,</span><span class="w"> </span><span class="m">100000</span><span class="p">)</span><span class="w">

</span><span class="c1"># Use multiple threads to count how many times each nucleotide appears in each sequence</span><span class="w">
</span><span class="n">frequences</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">clusterApply</span><span class="p">(</span><span class="n">cl</span><span class="o">=</span><span class="n">clusterOfThreads</span><span class="p">,</span><span class="w">
                           </span><span class="n">x</span><span class="o">=</span><span class="n">sequences</span><span class="p">,</span><span class="w">
                           </span><span class="n">fun</span><span class="o">=</span><span class="n">calculateNucleotideFrequencies</span><span class="p">)</span><span class="w">

</span><span class="c1"># REMEMBER to close the cluster of threads</span><span class="w">
</span><span class="n">stopCluster</span><span class="p">(</span><span class="n">clusterOfThreads</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">clusterApply()</code> function will automatically assign each of the sequences in <code class="language-plaintext highlighter-rouge">sequences</code> to a 100 threads, 12 of which will be run straight away and the rest will be queued. A list of nucleotide frequencies is returned, with each position corresponding the sequence in the same position of <code class="language-plaintext highlighter-rouge">sequences</code>.</p>

<p>I spent ages trying to think of a good example to demonstrate the ability of multithreading, and I donâ€™t really think I found one! Here, I created very large sequences and with these large sequenes it is faster to count the nucleotides on multiple threads.</p>

<p>Regardless of the example, hopefully what I have demonstrated here is that multithreading in R is very easy and I should be doing it more often!! All of the above R code is available <a href="https://github.com/JosephCrispell/GeneralTools/blob/master/MultithreadingInR_27-08-18.R">here</a>.</p>
:ET